{"ast":null,"code":"const API_BASE = process.env.REACT_APP_API_URL || process.env.REACT_APP_API_BASE || 'http://localhost:5000';\nexport function getToken() {\n  return localStorage.getItem('admin_token');\n}\nexport function saveToken(token) {\n  localStorage.setItem('admin_token', token);\n}\nexport function removeToken() {\n  localStorage.removeItem('admin_token');\n}\nexport async function apiPost(path, body) {\n  const url = path.startsWith('http') ? path : `${API_BASE}${path}`;\n  const res = await fetch(url, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(body)\n  });\n  if (!res.ok) {\n    const err = await res.json().catch(() => ({\n      message: 'Network error'\n    }));\n    throw new Error(err.message || 'Request failed');\n  }\n  return res.json();\n}\nexport async function authFetch(path, options = {}) {\n  const token = getToken();\n  const url = path.startsWith('http') ? path : `${API_BASE}${path}`;\n  const res = await fetch(url, {\n    ...options,\n    headers: {\n      'Content-Type': 'application/json',\n      ...(options.headers || {}),\n      Authorization: token ? `Bearer ${token}` : undefined\n    }\n  });\n  const contentType = (res.headers.get('content-type') || '').toLowerCase();\n  const isJson = contentType.includes('application/json');\n\n  // handle errors\n  if (!res.ok) {\n    // auto-logout on auth errors\n    if (res.status === 401 || res.status === 403) {\n      try {\n        removeToken();\n        window.dispatchEvent(new Event('app:logout'));\n      } catch (e) {}\n    }\n    if (isJson) {\n      const body = await res.json().catch(() => ({}));\n      const msg = body && (body.message || body.error) ? body.message || body.error : JSON.stringify(body);\n      throw new Error(msg || res.statusText || 'Request failed');\n    }\n\n    // non-JSON error (HTML page, etc.)\n    const txt = await res.text().catch(() => res.statusText);\n    throw new Error(txt || res.statusText || 'Request failed');\n  }\n\n  // success but not JSON (likely an HTML response) — surface as error to avoid JSON parse crash\n  if (!isJson) {\n    const txt = await res.text().catch(() => 'Received non-JSON response');\n    throw new Error(txt || 'Received non-JSON response');\n  }\n  return res.json();\n}","map":{"version":3,"names":["API_BASE","process","env","REACT_APP_API_URL","REACT_APP_API_BASE","getToken","localStorage","getItem","saveToken","token","setItem","removeToken","removeItem","apiPost","path","body","url","startsWith","res","fetch","method","headers","JSON","stringify","ok","err","json","catch","message","Error","authFetch","options","Authorization","undefined","contentType","get","toLowerCase","isJson","includes","status","window","dispatchEvent","Event","e","msg","error","statusText","txt","text"],"sources":["E:/Resturant/admin/src/utils/auth.js"],"sourcesContent":["const API_BASE = process.env.REACT_APP_API_URL || process.env.REACT_APP_API_BASE || 'http://localhost:5000';\r\n\r\nexport function getToken() {\r\n  return localStorage.getItem('admin_token');\r\n}\r\nexport function saveToken(token) {\r\n  localStorage.setItem('admin_token', token);\r\n}\r\nexport function removeToken() {\r\n  localStorage.removeItem('admin_token');\r\n}\r\n\r\nexport async function apiPost(path, body) {\r\n  const url = path.startsWith('http') ? path : `${API_BASE}${path}`;\r\n  const res = await fetch(url, {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify(body)\r\n  });\r\n  if (!res.ok) {\r\n    const err = await res.json().catch(()=>({message: 'Network error'}));\r\n    throw new Error(err.message || 'Request failed');\r\n  }\r\n  return res.json();\r\n}\r\n\r\nexport async function authFetch(path, options = {}) {\r\n  const token = getToken();\r\n  const url = path.startsWith('http') ? path : `${API_BASE}${path}`;\r\n  const res = await fetch(url, {\r\n    ...options,\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      ...(options.headers || {}),\r\n      Authorization: token ? `Bearer ${token}` : undefined\r\n    }\r\n  });\r\n\r\n  const contentType = (res.headers.get('content-type') || '').toLowerCase();\r\n  const isJson = contentType.includes('application/json');\r\n\r\n  // handle errors\r\n  if (!res.ok) {\r\n    // auto-logout on auth errors\r\n    if (res.status === 401 || res.status === 403) {\r\n      try { removeToken(); window.dispatchEvent(new Event('app:logout')); } catch(e){}\r\n    }\r\n\r\n    if (isJson) {\r\n      const body = await res.json().catch(() => ({}));\r\n      const msg = body && (body.message || body.error) ? (body.message || body.error) : JSON.stringify(body);\r\n      throw new Error(msg || res.statusText || 'Request failed');\r\n    }\r\n\r\n    // non-JSON error (HTML page, etc.)\r\n    const txt = await res.text().catch(() => res.statusText);\r\n    throw new Error(txt || res.statusText || 'Request failed');\r\n  }\r\n\r\n  // success but not JSON (likely an HTML response) — surface as error to avoid JSON parse crash\r\n  if (!isJson) {\r\n    const txt = await res.text().catch(() => 'Received non-JSON response');\r\n    throw new Error(txt || 'Received non-JSON response');\r\n  }\r\n\r\n  return res.json();\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}